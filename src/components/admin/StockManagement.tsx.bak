import React, { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import { Package, AlertTriangle, CheckCircle, Edit3 } from 'lucide-react';
import { useStore } from '../../store/useStore';

interface StockItem {
  id: string;
  name: string;
  currentStock: number;
  minStock: number;
  category: string;
  price: number;
  image: string;
}

const StockManagement: React.FC = () => {
  const { products, loadProducts } = useStore();
  const [stockItems, setStockItems] = useState<StockItem[]>([]);
  const [editingStock, setEditingStock] = useState<string | null>(null);
  const [tempStock, setTempStock] = useState<{ current: number; min: number }>({ current: 0, min: 0 });

  useEffect(() => {
    loadProducts();
  }, [loadProducts]);

  useEffect(() => {
    // Convertir productos a items de stock con datos simulados
    const items: StockItem[] = products.map(product => ({
      id: product.id,
      name: product.name,
      currentStock: Math.floor(Math.random() * 50) + 1, // Stock simulado
      minStock: Math.floor(Math.random() * 10) + 5, // Stock mínimo simulado
      category: product.category,
      price: product.price,
      image: product.images?.[0] || '/placeholder-image.jpg'
    }));
    setStockItems(items);
  }, [products]);

  const handleEditStock = (item: StockItem) => {
    setEditingStock(item.id);
    setTempStock({ current: item.currentStock, min: item.minStock });
  };

  const handleUpdateStock = (itemId: string) => {
    setStockItems(prev => prev.map(item => 
      item.id === itemId 
        ? { ...item, currentStock: tempStock.current, minStock: tempStock.min }
        : item
    ));
    setEditingStock(null);
  };

  const handleCancelEdit = () => {
    setEditingStock(null);
    setTempStock({ current: 0, min: 0 });
  };

  const getStockStatus = (current: number, min: number) => {
    if (current === 0) {
      return { status: 'out', color: 'red', text: 'Agotado' };
    } else if (current <= min) {
      return { status: 'low', color: 'yellow', text: 'Stock Bajo' };
    } else {
      return { status: 'good', color: 'green', text: 'Stock Normal' };
    }
  };

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('es-CO', {
      style: 'currency',
      currency: 'COP',
      minimumFractionDigits: 0
    }).format(price);
  };

  const lowStockItems = stockItems.filter(item => item.currentStock <= item.minStock);
  const outOfStockItems = stockItems.filter(item => item.currentStock === 0);

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="bg-white rounded-lg shadow-lg p-8"
    >
      <h2 className="text-3xl font-bold text-gray-800 mb-8">Gestión de Stock</h2>
      
      {/* Estadísticas de stock */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div className="bg-blue-50 p-6 rounded-lg">
          <div className="flex items-center gap-3">
            <Package className="w-8 h-8 text-blue-600" />
            <div>
              <h3 className="text-lg font-semibold text-blue-800">Total Productos</h3>
              <p className="text-2xl font-bold text-blue-600">{stockItems.length}</p>
            </div>
          </div>
        </div>
        
        <div className="bg-green-50 p-6 rounded-lg">
          <div className="flex items-center gap-3">
            <CheckCircle className="w-8 h-8 text-green-600" />
            <div>
              <h3 className="text-lg font-semibold text-green-800">Stock Normal</h3>
              <p className="text-2xl font-bold text-green-600">
                {stockItems.filter(item => item.currentStock > item.minStock).length}
              </p>
            </div>
          </div>
        </div>
        
        <div className="bg-yellow-50 p-6 rounded-lg">
          <div className="flex items-center gap-3">
            <AlertTriangle className="w-8 h-8 text-yellow-600" />
            <div>
              <h3 className="text-lg font-semibold text-yellow-800">Stock Bajo</h3>
              <p className="text-2xl font-bold text-yellow-600">{lowStockItems.length}</p>
            </div>
          </div>
        </div>
        
        <div className="bg-red-50 p-6 rounded-lg">
          <div className="flex items-center gap-3">
            <AlertTriangle className="w-8 h-8 text-red-600" />
            <div>
              <h3 className="text-lg font-semibold text-red-800">Agotados</h3>
              <p className="text-2xl font-bold text-red-600">{outOfStockItems.length}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Tabla de stock */}
      <div className="overflow-x-auto">
        <table className="w-full table-auto">
          <thead>
            <tr className="bg-gray-50">
              <th className="px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider">
                Producto
              </th>
              <th className="px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider">
                Stock Actual
              </th>
              <th className="px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider">
                Stock Mínimo
              </th>
              <th className="px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider">
                Estado
              </th>
              <th className="px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider">
                Precio
              </th>
              <th className="px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider">
                Acciones
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {stockItems.map((item, index) => {
              const stockStatus = getStockStatus(item.currentStock, item.minStock);
              const isEditing = editingStock === item.id;
              
              return (
                <motion.tr
                  key={item.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.05 }}
                  className="hover:bg-gray-50 transition-colors"
                >
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <img
                        src={item.image}
                        alt={item.name}
                        className="w-12 h-12 object-cover rounded-lg mr-4"
                        onError={(e) => {
                          const target = e.target as HTMLImageElement;
                          target.src = '/placeholder-image.jpg';
                        }}
                      />
                      <div>
                        <div className="text-sm font-medium text-gray-900">{item.name}</div>
                        <div className="text-sm text-gray-500 capitalize">{item.category}</div>
                      </div>
                    </div>
                  </td>
                  
                  <td className="px-6 py-4 whitespace-nowrap">
                    {isEditing ? (
                      <input
                        type="number"
                        value={tempStock.current}
                        onChange={(e) => setTempStock(prev => ({ ...prev, current: parseInt(e.target.value) || 0 }))}
                        className="w-20 px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-blue-500"
                        min="0"
                      />
                    ) : (
                      <span className="text-sm font-medium text-gray-900">
                        {item.currentStock} unidades
                      </span>
                    )}
                  </td>
                  
                  <td className="px-6 py-4 whitespace-nowrap">
                    {isEditing ? (
                      <input
                        type="number"
                        value={tempStock.min}
                        onChange={(e) => setTempStock(prev => ({ ...prev, min: parseInt(e.target.value) || 0 }))}
                        className="w-20 px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-blue-500"
                        min="0"
                      />
                    ) : (
                      <span className="text-sm text-gray-900">
                        {item.minStock} unidades
                      </span>
                    )}
                  </td>
                  
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                      stockStatus.color === 'red' ? 'bg-red-100 text-red-800' :
                      stockStatus.color === 'yellow' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-green-100 text-green-800'
                    }`}>
                      {stockStatus.text}
                    </span>
                  </td>
                  
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    {formatPrice(item.price)}
                  </td>
                  
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    {isEditing ? (
                      <div className="flex gap-2">
                        <motion.button
                          onClick={() => handleUpdateStock(item.id)}
                          whileHover={{ scale: 1.05 }}
                          whileTap={{ scale: 0.95 }}
                          className="px-3 py-1 bg-yellow-500 text-white rounded text-xs font-medium hover:bg-yellow-600 transition-colors"
                          style={{ backgroundColor: '#FFD300' }}
                        >
                          Guardar
                        </motion.button>
                        <motion.button
                          onClick={handleCancelEdit}
                          whileHover={{ scale: 1.05 }}
                          whileTap={{ scale: 0.95 }}
                          className="px-3 py-1 bg-gray-500 text-white rounded text-xs font-medium hover:bg-gray-600 transition-colors"
                        >
                          Cancelar
                        </motion.button>
                      </div>
                    ) : (
                      <motion.button
                        onClick={() => handleEditStock(item)}
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        className="flex items-center gap-1 px-3 py-1 bg-yellow-500 text-white rounded text-xs font-medium hover:bg-yellow-600 transition-colors"
                        style={{ backgroundColor: '#FFD300' }}
                      >
                        <Edit3 className="w-3 h-3" />
                        Actualizar Stock
                      </motion.button>
                    )}
                  </td>
                </motion.tr>
              );
            })}
          </tbody>
        </table>
      </div>
      
      {stockItems.length === 0 && (
        <div className="text-center py-12">
          <Package className="w-16 h-16 text-gray-400 mx-auto mb-4" />
          <p className="text-gray-500 text-lg">No hay productos para gestionar</p>
        </div>
      )}
    </motion.div>
  );
};

export default StockManagement;