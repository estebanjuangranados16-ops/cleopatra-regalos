rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Función para verificar si el usuario es admin
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Función para verificar si el usuario está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Función para verificar si es el propietario del documento
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // PRODUCTOS - Lectura pública, escritura solo admin
    match /products/{productId} {
      allow read: if true; // Público para mostrar catálogo
      allow create, update, delete: if isAdmin();
      
      // Validar estructura de datos en escritura
      allow write: if isAdmin() && 
                      request.resource.data.keys().hasAll(['name', 'price', 'category', 'description']) &&
                      request.resource.data.name is string &&
                      request.resource.data.price is number &&
                      request.resource.data.category in ['regalos', 'tecnologia'];
    }
    
    // GALERÍA - Lectura pública, escritura solo admin
    match /gallery/{galleryId} {
      allow read: if true; // Público para mostrar galería
      allow create, update, delete: if isAdmin();
      
      // Validar estructura de datos
      allow write: if isAdmin() && 
                      request.resource.data.keys().hasAll(['title', 'description', 'category', 'type']) &&
                      request.resource.data.type in ['image', 'video'];
    }
    
    // PEDIDOS - Solo usuarios autenticados pueden ver sus propios pedidos
    match /orders/{orderId} {
      allow read: if isAuthenticated() && 
                     (isOwner(resource.data.userId) || isAdmin());
      allow create: if isAuthenticated() && 
                       isOwner(request.resource.data.userId);
      allow update: if isAdmin(); // Solo admin puede actualizar estado
      allow delete: if isAdmin();
      
      // Validar estructura de pedidos
      allow write: if request.resource.data.keys().hasAll(['userId', 'items', 'total', 'status']) &&
                      request.resource.data.total is number &&
                      request.resource.data.status in ['pending', 'processing', 'shipped', 'delivered', 'cancelled'];
    }
    
    // USUARIOS - Solo pueden ver/editar su propio perfil
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow read: if isAdmin(); // Admin puede ver todos los usuarios
      
      // Validar que no se pueda cambiar el rol sin ser admin
      allow update: if isOwner(userId) && 
                       (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']) ||
                        isAdmin());
    }
    
    // CARRITO - Solo el propietario puede acceder
    match /carts/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // FAVORITOS - Solo el propietario puede acceder
    match /favorites/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // REVIEWS - Lectura pública, escritura autenticada
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
                       isOwner(request.resource.data.userId);
      allow update, delete: if isAuthenticated() && 
                               (isOwner(resource.data.userId) || isAdmin());
    }
    
    // CONFIGURACIÓN - Solo admin
    match /config/{configId} {
      allow read, write: if isAdmin();
    }
    
    // ANALYTICS - Solo admin
    match /analytics/{analyticsId} {
      allow read, write: if isAdmin();
    }
    
    // Denegar acceso a cualquier otra colección no especificada
    match /{document=**} {
      allow read, write: if false;
    }
  }
}