import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Search, Edit, Save, XCircle } from 'lucide-react';
import { useStore } from '../../store/useStore';
import { useDebounce } from '../../hooks/useDebounce';
import { Product } from '../../types';

const EditProductForm: React.FC = () => {
  const { products, loadProducts, updateProduct } = useStore();
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState<Record<string, boolean>>({});
  
  const debouncedSearchTerm = useDebounce(searchTerm, 300);
  
  const [formData, setFormData] = useState({
    name: '',
    price: '',
    category: 'regalos' as 'regalos' | 'tecnologia',
    description: '',
    stock: '',
    status: 'active' as 'active' | 'inactive'
  });

  useEffect(() => {
    loadProducts();
    
    // Verificar si hay un producto para editar desde localStorage
    const productToEdit = localStorage.getItem('editProduct');
    if (productToEdit) {
      try {
        const product = JSON.parse(productToEdit);
        setSelectedProduct(product);
        localStorage.removeItem('editProduct'); // Limpiar después de usar
      } catch (error) {
        console.error('Error parsing product to edit:', error);
      }
    }
  }, [loadProducts]);

  useEffect(() => {
    if (selectedProduct) {
      setFormData({
        name: selectedProduct.name,
        price: selectedProduct.price.toString(),
        category: selectedProduct.category,
        description: selectedProduct.description,
        stock: '0', // Asumiendo que stock no está en el tipo Product actual
        status: 'active'
      });
    }
  }, [selectedProduct]);

  const filteredProducts = products.filter(product =>
    product.name.toLowerCase().includes(debouncedSearchTerm.toLowerCase()) ||
    product.category.toLowerCase().includes(debouncedSearchTerm.toLowerCase())
  );

  const validateForm = () => {
    const newErrors: Record<string, boolean> = {};
    
    if (!formData.name.trim()) newErrors.name = true;
    if (!formData.price || parseFloat(formData.price) <= 0) newErrors.price = true;
    if (!formData.description.trim()) newErrors.description = true;
    if (!formData.stock || parseInt(formData.stock) < 0) newErrors.stock = true;
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!selectedProduct || !validateForm()) return;
    
    setLoading(true);
    
    try {
      const updatedProduct: Partial<Product> = {
        name: formData.name,
        price: parseFloat(formData.price),
        category: formData.category,
        description: formData.description
      };

      await updateProduct(selectedProduct.id, updatedProduct);
      
      // Reset form
      setSelectedProduct(null);
      setSearchTerm('');
      setFormData({
        name: '',
        price: '',
        category: 'regalos',
        description: '',
        stock: '',
        status: 'active'
      });
      setErrors({});
      
    } catch (error) {
      console.error('Error updating product:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = () => {
    setSelectedProduct(null);
    setSearchTerm('');
    setFormData({
      name: '',
      price: '',
      category: 'regalos',
      description: '',
      stock: '',
      status: 'active'
    });
    setErrors({});
  };

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('es-CO', {
      style: 'currency',
      currency: 'COP',
      minimumFractionDigits: 0
    }).format(price);
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="bg-white rounded-lg shadow-lg p-8"
    >
      <h2 className="text-3xl font-bold text-gray-800 mb-8">Editar Producto</h2>
      
      {/* Búsqueda de productos */}
      <div className="mb-8">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Buscar Producto
        </label>
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
          <input
            type="text"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
            placeholder="Buscar por nombre o categoría..."
          />
        </div>
        
        {/* Lista de productos filtrados */}
        {searchTerm && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            className="mt-4 max-h-60 overflow-y-auto border border-gray-200 rounded-lg"
          >
            {filteredProducts.length > 0 ? (
              filteredProducts.map((product) => (
                <button
                  key={product.id}
                  onClick={() => {
                    setSelectedProduct(product);
                    setSearchTerm('');
                  }}
                  className="w-full p-4 text-left hover:bg-gray-50 border-b border-gray-100 last:border-b-0 transition-colors"
                >
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="font-medium text-gray-900">{product.name}</h4>
                      <p className="text-sm text-gray-500 capitalize">{product.category}</p>
                    </div>
                    <span className="text-sm font-medium text-blue-600">
                      {formatPrice(product.price)}
                    </span>
                  </div>
                </button>
              ))
            ) : (
              <div className="p-4 text-center text-gray-500">
                No se encontraron productos
              </div>
            )}
          </motion.div>
        )}
      </div>

      {/* Formulario de edición */}
      {selectedProduct && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="border-t pt-8"
        >
          <div className="flex items-center gap-3 mb-6">
            <Edit className="w-6 h-6 text-blue-600" />
            <h3 className="text-xl font-semibold text-gray-800">
              Editando: {selectedProduct.name}
            </h3>
          </div>
          
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid md:grid-cols-2 gap-6">
              {/* Nombre */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Nombre del Producto *
                </label>
                <input
                  type="text"
                  value={formData.name}
                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all ${
                    errors.name ? 'border-red-500' : 'border-gray-300'
                  }`}
                />
              </div>

              {/* Precio */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Precio (COP) *
                </label>
                <input
                  type="number"
                  value={formData.price}
                  onChange={(e) => setFormData(prev => ({ ...prev, price: e.target.value }))}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all ${
                    errors.price ? 'border-red-500' : 'border-gray-300'
                  }`}
                  min="0"
                  step="1000"
                />
              </div>

              {/* Categoría */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Categoría *
                </label>
                <select
                  value={formData.category}
                  onChange={(e) => setFormData(prev => ({ ...prev, category: e.target.value as 'regalos' | 'tecnologia' }))}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                >
                  <option value="regalos">Regalos</option>
                  <option value="tecnologia">Tecnología</option>
                </select>
              </div>

              {/* Stock */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Stock *
                </label>
                <input
                  type="number"
                  value={formData.stock}
                  onChange={(e) => setFormData(prev => ({ ...prev, stock: e.target.value }))}
                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all ${
                    errors.stock ? 'border-red-500' : 'border-gray-300'
                  }`}
                  min="0"
                />
              </div>
            </div>

            {/* Descripción */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Descripción *
              </label>
              <textarea
                value={formData.description}
                onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                rows={4}
                className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all resize-none ${
                  errors.description ? 'border-red-500' : 'border-gray-300'
                }`}
              />
            </div>

            {/* Estado */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Estado
              </label>
              <select
                value={formData.status}
                onChange={(e) => setFormData(prev => ({ ...prev, status: e.target.value as 'active' | 'inactive' }))}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
              >
                <option value="active">Activo</option>
                <option value="inactive">Inactivo</option>
              </select>
            </div>

            {/* Botones */}
            <div className="flex gap-4 pt-6">
              <motion.button
                type="submit"
                disabled={loading}
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                className="flex items-center gap-2 px-8 py-3 bg-green-500 text-white font-semibold rounded-lg hover:bg-green-600 transition-colors disabled:opacity-50"
                style={{ backgroundColor: '#27ae60' }}
              >
                <Save className="w-5 h-5" />
                {loading ? 'Actualizando...' : 'Actualizar Producto'}
              </motion.button>
              
              <motion.button
                type="button"
                onClick={handleCancel}
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                className="flex items-center gap-2 px-8 py-3 bg-gray-500 text-white font-semibold rounded-lg hover:bg-gray-600 transition-colors"
                style={{ backgroundColor: '#95a5a6' }}
              >
                <XCircle className="w-5 h-5" />
                Cancelar
              </motion.button>
            </div>
          </form>
        </motion.div>
      )}
    </motion.div>
  );
};

export default EditProductForm;