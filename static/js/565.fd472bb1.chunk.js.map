{"version":3,"file":"static/js/565.fd472bb1.chunk.js","mappings":"yMAKA,MAWMA,GAAMC,EAAAA,EAAAA,IAXW,CACrBC,OAAQC,0CACRC,WAAYD,kCACZE,UAAWF,kBACXG,cAAeH,sCACfI,kBAAmBJ,eACnBK,MAAOL,4CACPM,cAAeN,iBAOJO,GAAKC,EAAAA,EAAAA,IAAaX,GCNzBY,IDSiBC,EAAAA,EAAAA,IAAWb,IAGdc,EAAAA,EAAAA,IAAQd,GCZJ,YAEXe,EAAiB,CAC5B,iBAAMC,GACJ,IAEE,IAAIC,EACJ,IACEA,GAAIC,EAAAA,EAAAA,IAAMC,EAAAA,EAAAA,IAAWT,EAAIE,IAAkBQ,EAAAA,EAAAA,IAAQ,YAAa,QAClE,CAAE,MAAAC,GAEAJ,GAAIE,EAAAA,EAAAA,IAAWT,EAAIE,EACrB,CAGA,aADuBU,EAAAA,EAAAA,IAAQL,IACfM,KAAKC,IAAIC,IAAGC,EAAAA,EAAAA,GAAA,CAC1BC,GAAIF,EAAIE,IACLF,EAAIG,QAEX,CAAE,MAAOC,GAEP,OADAC,QAAQD,MAAM,0BAA2BA,GAClC,EACT,CACF,EAEA,gBAAME,CAAWC,GACf,IACE,MAAMC,GAAWP,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACZM,GAAO,IACVE,WAAW,IAAIC,MAAOC,cACtBC,WAAW,IAAIF,MAAOC,gBAElBE,QAAeC,EAAAA,EAAAA,KAAOpB,EAAAA,EAAAA,IAAWT,EAAIE,GAAkBqB,GAE7D,OADAH,QAAQU,IAAI,8BAA+BF,EAAOX,IAC3CW,EAAOX,EAChB,CAAE,MAAOE,GAEP,MADAC,QAAQD,MAAM,wBAAyBA,GACjCA,CACR,CACF,EAEA,mBAAMY,CAAcd,EAAYK,GAC9B,IACE,MAAMM,GAASb,EAAAA,EAAAA,IAAIf,EAAIE,EAAiBe,GAClCe,GAAUhB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACXM,GAAO,IACVK,WAAW,IAAIF,MAAOC,sBAElBO,EAAAA,EAAAA,IAAUL,EAAQI,GACxBZ,QAAQU,IAAI,gCAAiCb,EAC/C,CAAE,MAAOE,GAEP,MADAC,QAAQD,MAAM,0BAA2BA,GACnCA,CACR,CACF,EAEA,mBAAMe,CAAcjB,GAClB,IACE,MAAMW,GAASb,EAAAA,EAAAA,IAAIf,EAAIE,EAAiBe,SAClCkB,EAAAA,EAAAA,IAAUP,GAChBR,QAAQU,IAAI,gCAAiCb,EAC/C,CAAE,MAAOE,GAEP,MADAC,QAAQD,MAAM,0BAA2BA,GACnCA,CACR,CACF,EAGA,oBAAMiB,GACJ,IACE,MAAMC,GAAiB5B,EAAAA,EAAAA,IAAWT,EAAIE,GAGtC,aAFMU,EAAAA,EAAAA,IAAQyB,GACdjB,QAAQU,IAAI,mCACL,CACT,CAAE,MAAOX,GAEP,OADAC,QAAQD,MAAM,8BAA+BA,IACtC,CACT,CACF,E","sources":["config/firebase.ts","services/productService.ts"],"sourcesContent":["import { initializeApp } from 'firebase/app';\nimport { getFirestore } from 'firebase/firestore';\nimport { getStorage } from 'firebase/storage';\nimport { getAuth } from 'firebase/auth';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Firestore\nexport const db = getFirestore(app);\n\n// Initialize Storage\nexport const storage = getStorage(app);\n\n// Initialize Auth\nexport const auth = getAuth(app);\n\nexport default app;","import { \n  collection, \n  addDoc, \n  getDocs, \n  doc, \n  updateDoc, \n  deleteDoc, \n  query,\n  orderBy \n} from 'firebase/firestore';\nimport { db } from '../config/firebase';\nimport { Product } from '../types';\n\nconst COLLECTION_NAME = 'products';\n\nexport const productService = {\n  async getProducts(): Promise<Product[]> {\n    try {\n      // Intentar con ordenamiento primero\n      let q;\n      try {\n        q = query(collection(db, COLLECTION_NAME), orderBy('createdAt', 'desc'));\n      } catch {\n        // Si falla el ordenamiento, usar consulta simple\n        q = collection(db, COLLECTION_NAME);\n      }\n      \n      const snapshot = await getDocs(q);\n      return snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      })) as Product[];\n    } catch (error) {\n      console.error('Error getting products:', error);\n      return [];\n    }\n  },\n\n  async addProduct(product: Omit<Product, 'id'>): Promise<string> {\n    try {\n      const productData = {\n        ...product,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      const docRef = await addDoc(collection(db, COLLECTION_NAME), productData);\n      console.log('Product added successfully:', docRef.id);\n      return docRef.id;\n    } catch (error) {\n      console.error('Error adding product:', error);\n      throw error;\n    }\n  },\n\n  async updateProduct(id: string, product: Partial<Product>): Promise<void> {\n    try {\n      const docRef = doc(db, COLLECTION_NAME, id);\n      const updateData = {\n        ...product,\n        updatedAt: new Date().toISOString()\n      };\n      await updateDoc(docRef, updateData);\n      console.log('Product updated successfully:', id);\n    } catch (error) {\n      console.error('Error updating product:', error);\n      throw error;\n    }\n  },\n\n  async deleteProduct(id: string): Promise<void> {\n    try {\n      const docRef = doc(db, COLLECTION_NAME, id);\n      await deleteDoc(docRef);\n      console.log('Product deleted successfully:', id);\n    } catch (error) {\n      console.error('Error deleting product:', error);\n      throw error;\n    }\n  },\n\n  // Método para verificar la conexión\n  async testConnection(): Promise<boolean> {\n    try {\n      const testCollection = collection(db, COLLECTION_NAME);\n      await getDocs(testCollection);\n      console.log('Firebase connection successful');\n      return true;\n    } catch (error) {\n      console.error('Firebase connection failed:', error);\n      return false;\n    }\n  }\n};"],"names":["app","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getFirestore","COLLECTION_NAME","getStorage","getAuth","productService","getProducts","q","query","collection","orderBy","_unused","getDocs","docs","map","doc","_objectSpread","id","data","error","console","addProduct","product","productData","createdAt","Date","toISOString","updatedAt","docRef","addDoc","log","updateProduct","updateData","updateDoc","deleteProduct","deleteDoc","testConnection","testCollection"],"sourceRoot":""}