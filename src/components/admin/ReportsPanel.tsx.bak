import React, { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import { BarChart3, TrendingUp, Calendar, Filter, Download } from 'lucide-react';
import { useStore } from '../../store/useStore';

interface ChartData {
  category: string;
  value: number;
  color: string;
}

const ReportsPanel: React.FC = () => {
  const { products, loadProducts } = useStore();
  const [dateFilter, setDateFilter] = useState('month');
  const [chartData, setChartData] = useState<ChartData[]>([]);
  const [salesData, setSalesData] = useState<ChartData[]>([]);

  useEffect(() => {
    loadProducts();
  }, [loadProducts]);

  useEffect(() => {
    // Generar datos simulados para el gráfico
    const categoryData: ChartData[] = [
      { category: 'Regalos', value: products.filter(p => p.category === 'regalos').length, color: '#FFD300' },
      { category: 'Tecnología', value: products.filter(p => p.category === 'tecnologia').length, color: '#2563EB' }
    ];
    
    // Datos simulados de ventas
    const salesSimulated: ChartData[] = [
      { category: 'Enero', value: Math.floor(Math.random() * 100) + 50, color: '#3B82F6' },
      { category: 'Febrero', value: Math.floor(Math.random() * 100) + 50, color: '#10B981' },
      { category: 'Marzo', value: Math.floor(Math.random() * 100) + 50, color: '#F59E0B' },
      { category: 'Abril', value: Math.floor(Math.random() * 100) + 50, color: '#EF4444' },
      { category: 'Mayo', value: Math.floor(Math.random() * 100) + 50, color: '#8B5CF6' },
      { category: 'Junio', value: Math.floor(Math.random() * 100) + 50, color: '#06B6D4' }
    ];
    
    setChartData(categoryData);
    setSalesData(salesSimulated);
  }, [products]);

  const maxValue = Math.max(...chartData.map(d => d.value), ...salesData.map(d => d.value));

  const BarChart: React.FC<{ data: ChartData[]; title: string }> = ({ data, title }) => (
    <div className="bg-white p-6 rounded-lg shadow-sm border">
      <h3 className="text-lg font-semibold text-gray-800 mb-6">{title}</h3>
      <div className="space-y-4">
        {data.map((item, index) => (
          <motion.div
            key={item.category}
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: index * 0.1 }}
            className="flex items-center gap-4"
          >
            <div className="w-20 text-sm font-medium text-gray-700 text-right">
              {item.category}
            </div>
            <div className="flex-1 relative">
              <motion.div
                initial={{ width: 0 }}
                animate={{ width: `${(item.value / maxValue) * 100}%` }}
                transition={{ duration: 1, delay: index * 0.1 }}
                className="h-8 rounded-lg flex items-center justify-end pr-3"
                style={{ backgroundColor: item.color }}
              >
                <span className="text-white text-sm font-medium">
                  {item.value}
                </span>
              </motion.div>
            </div>
          </motion.div>
        ))}
      </div>
    </div>
  );

  const StatCard: React.FC<{ title: string; value: string; icon: React.ReactNode; color: string }> = 
    ({ title, value, icon, color }) => (
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-white p-6 rounded-lg shadow-sm border"
      >
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm font-medium text-gray-600">{title}</p>
            <p className="text-2xl font-bold text-gray-900">{value}</p>
          </div>
          <div className={`p-3 rounded-lg`} style={{ backgroundColor: `${color}20` }}>
            <div style={{ color }}>{icon}</div>
          </div>
        </div>
      </motion.div>
    );

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="space-y-8"
    >
      <div className="flex flex-col md:flex-row md:items-center md:justify-between">
        <h2 className="text-3xl font-bold text-gray-800 mb-4 md:mb-0">Reportes y Análisis</h2>
        
        <div className="flex flex-col md:flex-row gap-4">
          {/* Filtro de fecha */}
          <div className="flex items-center gap-2">
            <Calendar className="w-5 h-5 text-gray-500" />
            <select
              value={dateFilter}
              onChange={(e) => setDateFilter(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
            >
              <option value="week">Esta semana</option>
              <option value="month">Este mes</option>
              <option value="quarter">Este trimestre</option>
              <option value="year">Este año</option>
            </select>
          </div>
          
          {/* Botón de exportar */}
          <motion.button
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            <Download className="w-4 h-4" />
            Exportar
          </motion.button>
        </div>
      </div>

      {/* Estadísticas principales */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <StatCard
          title="Total Productos"
          value={products.length.toString()}
          icon={<BarChart3 className="w-6 h-6" />}
          color="#3B82F6"
        />
        <StatCard
          title="Ventas del Mes"
          value="$2,450,000"
          icon={<TrendingUp className="w-6 h-6" />}
          color="#10B981"
        />
        <StatCard
          title="Productos Activos"
          value={products.length.toString()}
          icon={<BarChart3 className="w-6 h-6" />}
          color="#F59E0B"
        />
        <StatCard
          title="Stock Bajo"
          value="3"
          icon={<Filter className="w-6 h-6" />}
          color="#EF4444"
        />
      </div>

      {/* Gráficos */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <BarChart data={chartData} title="Productos por Categoría" />
        <BarChart data={salesData} title="Ventas por Mes" />
      </div>

      {/* Tabla de productos más vendidos */}
      <div className="bg-white rounded-lg shadow-sm border p-6">
        <h3 className="text-lg font-semibold text-gray-800 mb-6">Productos Más Vendidos</h3>
        <div className="overflow-x-auto">
          <table className="w-full table-auto">
            <thead>
              <tr className="bg-gray-50">
                <th className="px-4 py-3 text-left text-sm font-medium text-gray-500">Producto</th>
                <th className="px-4 py-3 text-left text-sm font-medium text-gray-500">Categoría</th>
                <th className="px-4 py-3 text-left text-sm font-medium text-gray-500">Ventas</th>
                <th className="px-4 py-3 text-left text-sm font-medium text-gray-500">Ingresos</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {products.slice(0, 5).map((product, index) => (
                <motion.tr
                  key={product.id}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                  className="hover:bg-gray-50"
                >
                  <td className="px-4 py-3">
                    <div className="flex items-center gap-3">
                      <img
                        src={product.images?.[0] || '/placeholder-image.jpg'}
                        alt={product.name}
                        className="w-10 h-10 object-cover rounded-lg"
                        onError={(e) => {
                          const target = e.target as HTMLImageElement;
                          target.src = '/placeholder-image.jpg';
                        }}
                      />
                      <span className="text-sm font-medium text-gray-900">{product.name}</span>
                    </div>
                  </td>
                  <td className="px-4 py-3">
                    <span className="px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded-full capitalize">
                      {product.category}
                    </span>
                  </td>
                  <td className="px-4 py-3 text-sm text-gray-900">
                    {Math.floor(Math.random() * 50) + 10} unidades
                  </td>
                  <td className="px-4 py-3 text-sm font-medium text-gray-900">
                    ${(Math.floor(Math.random() * 500000) + 100000).toLocaleString()}
                  </td>
                </motion.tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Alertas y notificaciones */}
      <div className="bg-white rounded-lg shadow-sm border p-6">
        <h3 className="text-lg font-semibold text-gray-800 mb-6">Alertas del Sistema</h3>
        <div className="space-y-4">
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            className="flex items-center gap-3 p-4 bg-yellow-50 border border-yellow-200 rounded-lg"
          >
            <Filter className="w-5 h-5 text-yellow-600" />
            <div>
              <p className="text-sm font-medium text-yellow-800">Stock Bajo</p>
              <p className="text-sm text-yellow-700">3 productos necesitan reposición</p>
            </div>
          </motion.div>
          
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.1 }}
            className="flex items-center gap-3 p-4 bg-green-50 border border-green-200 rounded-lg"
          >
            <TrendingUp className="w-5 h-5 text-green-600" />
            <div>
              <p className="text-sm font-medium text-green-800">Ventas en Aumento</p>
              <p className="text-sm text-green-700">Las ventas han aumentado un 15% este mes</p>
            </div>
          </motion.div>
        </div>
      </div>
    </motion.div>
  );
};

export default ReportsPanel;